/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
)

// checks if the AccessFlowSettingsV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessFlowSettingsV1{}

// AccessFlowSettingsV1 struct for AccessFlowSettingsV1
type AccessFlowSettingsV1 struct {
	RequireJustificationOnRequestAgain NullableBool `json:"require_justification_on_request_again,omitempty"`
	RequireAllApprovers                NullableBool `json:"require_all_approvers,omitempty"`
	RequireApproverJustification       NullableBool `json:"require_approver_justification,omitempty"`
	ApproverCannotApproveHimself       NullableBool `json:"approver_cannot_approve_himself,omitempty"`
}

// NewAccessFlowSettingsV1 instantiates a new AccessFlowSettingsV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessFlowSettingsV1() *AccessFlowSettingsV1 {
	this := AccessFlowSettingsV1{}
	return &this
}

// NewAccessFlowSettingsV1WithDefaults instantiates a new AccessFlowSettingsV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessFlowSettingsV1WithDefaults() *AccessFlowSettingsV1 {
	this := AccessFlowSettingsV1{}
	return &this
}

// GetRequireJustificationOnRequestAgain returns the RequireJustificationOnRequestAgain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessFlowSettingsV1) GetRequireJustificationOnRequestAgain() bool {
	if o == nil || IsNil(o.RequireJustificationOnRequestAgain.Get()) {
		var ret bool
		return ret
	}
	return *o.RequireJustificationOnRequestAgain.Get()
}

// GetRequireJustificationOnRequestAgainOk returns a tuple with the RequireJustificationOnRequestAgain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessFlowSettingsV1) GetRequireJustificationOnRequestAgainOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequireJustificationOnRequestAgain.Get(), o.RequireJustificationOnRequestAgain.IsSet()
}

// HasRequireJustificationOnRequestAgain returns a boolean if a field has been set.
func (o *AccessFlowSettingsV1) HasRequireJustificationOnRequestAgain() bool {
	if o != nil && o.RequireJustificationOnRequestAgain.IsSet() {
		return true
	}

	return false
}

// SetRequireJustificationOnRequestAgain gets a reference to the given NullableBool and assigns it to the RequireJustificationOnRequestAgain field.
func (o *AccessFlowSettingsV1) SetRequireJustificationOnRequestAgain(v bool) {
	o.RequireJustificationOnRequestAgain.Set(&v)
}

// SetRequireJustificationOnRequestAgainNil sets the value for RequireJustificationOnRequestAgain to be an explicit nil
func (o *AccessFlowSettingsV1) SetRequireJustificationOnRequestAgainNil() {
	o.RequireJustificationOnRequestAgain.Set(nil)
}

// UnsetRequireJustificationOnRequestAgain ensures that no value is present for RequireJustificationOnRequestAgain, not even an explicit nil
func (o *AccessFlowSettingsV1) UnsetRequireJustificationOnRequestAgain() {
	o.RequireJustificationOnRequestAgain.Unset()
}

// GetRequireAllApprovers returns the RequireAllApprovers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessFlowSettingsV1) GetRequireAllApprovers() bool {
	if o == nil || IsNil(o.RequireAllApprovers.Get()) {
		var ret bool
		return ret
	}
	return *o.RequireAllApprovers.Get()
}

// GetRequireAllApproversOk returns a tuple with the RequireAllApprovers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessFlowSettingsV1) GetRequireAllApproversOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequireAllApprovers.Get(), o.RequireAllApprovers.IsSet()
}

// HasRequireAllApprovers returns a boolean if a field has been set.
func (o *AccessFlowSettingsV1) HasRequireAllApprovers() bool {
	if o != nil && o.RequireAllApprovers.IsSet() {
		return true
	}

	return false
}

// SetRequireAllApprovers gets a reference to the given NullableBool and assigns it to the RequireAllApprovers field.
func (o *AccessFlowSettingsV1) SetRequireAllApprovers(v bool) {
	o.RequireAllApprovers.Set(&v)
}

// SetRequireAllApproversNil sets the value for RequireAllApprovers to be an explicit nil
func (o *AccessFlowSettingsV1) SetRequireAllApproversNil() {
	o.RequireAllApprovers.Set(nil)
}

// UnsetRequireAllApprovers ensures that no value is present for RequireAllApprovers, not even an explicit nil
func (o *AccessFlowSettingsV1) UnsetRequireAllApprovers() {
	o.RequireAllApprovers.Unset()
}

// GetRequireApproverJustification returns the RequireApproverJustification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessFlowSettingsV1) GetRequireApproverJustification() bool {
	if o == nil || IsNil(o.RequireApproverJustification.Get()) {
		var ret bool
		return ret
	}
	return *o.RequireApproverJustification.Get()
}

// GetRequireApproverJustificationOk returns a tuple with the RequireApproverJustification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessFlowSettingsV1) GetRequireApproverJustificationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequireApproverJustification.Get(), o.RequireApproverJustification.IsSet()
}

// HasRequireApproverJustification returns a boolean if a field has been set.
func (o *AccessFlowSettingsV1) HasRequireApproverJustification() bool {
	if o != nil && o.RequireApproverJustification.IsSet() {
		return true
	}

	return false
}

// SetRequireApproverJustification gets a reference to the given NullableBool and assigns it to the RequireApproverJustification field.
func (o *AccessFlowSettingsV1) SetRequireApproverJustification(v bool) {
	o.RequireApproverJustification.Set(&v)
}

// SetRequireApproverJustificationNil sets the value for RequireApproverJustification to be an explicit nil
func (o *AccessFlowSettingsV1) SetRequireApproverJustificationNil() {
	o.RequireApproverJustification.Set(nil)
}

// UnsetRequireApproverJustification ensures that no value is present for RequireApproverJustification, not even an explicit nil
func (o *AccessFlowSettingsV1) UnsetRequireApproverJustification() {
	o.RequireApproverJustification.Unset()
}

// GetApproverCannotApproveHimself returns the ApproverCannotApproveHimself field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessFlowSettingsV1) GetApproverCannotApproveHimself() bool {
	if o == nil || IsNil(o.ApproverCannotApproveHimself.Get()) {
		var ret bool
		return ret
	}
	return *o.ApproverCannotApproveHimself.Get()
}

// GetApproverCannotApproveHimselfOk returns a tuple with the ApproverCannotApproveHimself field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessFlowSettingsV1) GetApproverCannotApproveHimselfOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApproverCannotApproveHimself.Get(), o.ApproverCannotApproveHimself.IsSet()
}

// HasApproverCannotApproveHimself returns a boolean if a field has been set.
func (o *AccessFlowSettingsV1) HasApproverCannotApproveHimself() bool {
	if o != nil && o.ApproverCannotApproveHimself.IsSet() {
		return true
	}

	return false
}

// SetApproverCannotApproveHimself gets a reference to the given NullableBool and assigns it to the ApproverCannotApproveHimself field.
func (o *AccessFlowSettingsV1) SetApproverCannotApproveHimself(v bool) {
	o.ApproverCannotApproveHimself.Set(&v)
}

// SetApproverCannotApproveHimselfNil sets the value for ApproverCannotApproveHimself to be an explicit nil
func (o *AccessFlowSettingsV1) SetApproverCannotApproveHimselfNil() {
	o.ApproverCannotApproveHimself.Set(nil)
}

// UnsetApproverCannotApproveHimself ensures that no value is present for ApproverCannotApproveHimself, not even an explicit nil
func (o *AccessFlowSettingsV1) UnsetApproverCannotApproveHimself() {
	o.ApproverCannotApproveHimself.Unset()
}

func (o AccessFlowSettingsV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessFlowSettingsV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RequireJustificationOnRequestAgain.IsSet() {
		toSerialize["require_justification_on_request_again"] = o.RequireJustificationOnRequestAgain.Get()
	}
	if o.RequireAllApprovers.IsSet() {
		toSerialize["require_all_approvers"] = o.RequireAllApprovers.Get()
	}
	if o.RequireApproverJustification.IsSet() {
		toSerialize["require_approver_justification"] = o.RequireApproverJustification.Get()
	}
	if o.ApproverCannotApproveHimself.IsSet() {
		toSerialize["approver_cannot_approve_himself"] = o.ApproverCannotApproveHimself.Get()
	}
	return toSerialize, nil
}

type NullableAccessFlowSettingsV1 struct {
	value *AccessFlowSettingsV1
	isSet bool
}

func (v NullableAccessFlowSettingsV1) Get() *AccessFlowSettingsV1 {
	return v.value
}

func (v *NullableAccessFlowSettingsV1) Set(val *AccessFlowSettingsV1) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessFlowSettingsV1) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessFlowSettingsV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessFlowSettingsV1(val *AccessFlowSettingsV1) *NullableAccessFlowSettingsV1 {
	return &NullableAccessFlowSettingsV1{value: val, isSet: true}
}

func (v NullableAccessFlowSettingsV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessFlowSettingsV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
)

// checks if the AccessBundleV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessBundleV1{}

// AccessBundleV1 struct for AccessBundleV1
type AccessBundleV1 struct {
	Id                 string                      `json:"id"`
	Name               string                      `json:"name"`
	IntegrationTargets []AccessTargetIntegrationV1 `json:"integration_targets"`
}

// NewAccessBundleV1 instantiates a new AccessBundleV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessBundleV1(id string, name string, integrationTargets []AccessTargetIntegrationV1) *AccessBundleV1 {
	this := AccessBundleV1{}
	this.Id = id
	this.Name = name
	this.IntegrationTargets = integrationTargets
	return &this
}

// NewAccessBundleV1WithDefaults instantiates a new AccessBundleV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessBundleV1WithDefaults() *AccessBundleV1 {
	this := AccessBundleV1{}
	return &this
}

// GetId returns the Id field value
func (o *AccessBundleV1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccessBundleV1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccessBundleV1) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AccessBundleV1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccessBundleV1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccessBundleV1) SetName(v string) {
	o.Name = v
}

// GetIntegrationTargets returns the IntegrationTargets field value
func (o *AccessBundleV1) GetIntegrationTargets() []AccessTargetIntegrationV1 {
	if o == nil {
		var ret []AccessTargetIntegrationV1
		return ret
	}

	return o.IntegrationTargets
}

// GetIntegrationTargetsOk returns a tuple with the IntegrationTargets field value
// and a boolean to check if the value has been set.
func (o *AccessBundleV1) GetIntegrationTargetsOk() ([]AccessTargetIntegrationV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntegrationTargets, true
}

// SetIntegrationTargets sets field value
func (o *AccessBundleV1) SetIntegrationTargets(v []AccessTargetIntegrationV1) {
	o.IntegrationTargets = v
}

func (o AccessBundleV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessBundleV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["integration_targets"] = o.IntegrationTargets
	return toSerialize, nil
}

type NullableAccessBundleV1 struct {
	value *AccessBundleV1
	isSet bool
}

func (v NullableAccessBundleV1) Get() *AccessBundleV1 {
	return v.value
}

func (v *NullableAccessBundleV1) Set(val *AccessBundleV1) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessBundleV1) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessBundleV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessBundleV1(val *AccessBundleV1) *NullableAccessBundleV1 {
	return &NullableAccessBundleV1{value: val, isSet: true}
}

func (v NullableAccessBundleV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessBundleV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

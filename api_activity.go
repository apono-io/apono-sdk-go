/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)

// ActivityApiService ActivityApi service
type ActivityApiService service

type ApiListActivityRequest struct {
	ctx                 context.Context
	ApiService          *ActivityApiService
	endDate             *int64
	fields              *[]ReportField
	filterIntegrationId *[]string
	filterPermission    *[]string
	filterRequestorId   *[]string
	filterResource      *[]string
	filterResourceType  *[]string
	filterStatus        *[]AccessStatus
	startDate           *int64
}

func (r ApiListActivityRequest) EndDate(endDate int64) ApiListActivityRequest {
	r.endDate = &endDate
	return r
}

func (r ApiListActivityRequest) Fields(fields []ReportField) ApiListActivityRequest {
	r.fields = &fields
	return r
}

func (r ApiListActivityRequest) FilterIntegrationId(filterIntegrationId []string) ApiListActivityRequest {
	r.filterIntegrationId = &filterIntegrationId
	return r
}

func (r ApiListActivityRequest) FilterPermission(filterPermission []string) ApiListActivityRequest {
	r.filterPermission = &filterPermission
	return r
}

func (r ApiListActivityRequest) FilterRequestorId(filterRequestorId []string) ApiListActivityRequest {
	r.filterRequestorId = &filterRequestorId
	return r
}

func (r ApiListActivityRequest) FilterResource(filterResource []string) ApiListActivityRequest {
	r.filterResource = &filterResource
	return r
}

func (r ApiListActivityRequest) FilterResourceType(filterResourceType []string) ApiListActivityRequest {
	r.filterResourceType = &filterResourceType
	return r
}

func (r ApiListActivityRequest) FilterStatus(filterStatus []AccessStatus) ApiListActivityRequest {
	r.filterStatus = &filterStatus
	return r
}

func (r ApiListActivityRequest) StartDate(startDate int64) ApiListActivityRequest {
	r.startDate = &startDate
	return r
}

func (r ApiListActivityRequest) Execute() (*PaginatedResponseActivityReportJsonExportModel, *http.Response, error) {
	return r.ApiService.ListActivityExecute(r)
}

/*
ListActivity List Activity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListActivityRequest
*/
func (a *ActivityApiService) ListActivity(ctx context.Context) ApiListActivityRequest {
	return ApiListActivityRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedResponseActivityReportJsonExportModel
func (a *ActivityApiService) ListActivityExecute(r ApiListActivityRequest) (*PaginatedResponseActivityReportJsonExportModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedResponseActivityReportJsonExportModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityApiService.ListActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/activity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filterIntegrationId != nil {
		t := *r.filterIntegrationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[integration_id]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[integration_id]", t, "multi")
		}
	}
	if r.filterPermission != nil {
		t := *r.filterPermission
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[permission]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[permission]", t, "multi")
		}
	}
	if r.filterRequestorId != nil {
		t := *r.filterRequestorId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[requestor_id]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[requestor_id]", t, "multi")
		}
	}
	if r.filterResource != nil {
		t := *r.filterResource
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[resource]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[resource]", t, "multi")
		}
	}
	if r.filterResourceType != nil {
		t := *r.filterResourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[resource_type]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[resource_type]", t, "multi")
		}
	}
	if r.filterStatus != nil {
		t := *r.filterStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", t, "multi")
		}
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

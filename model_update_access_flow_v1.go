/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
)

// checks if the UpdateAccessFlowV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAccessFlowV1{}

// UpdateAccessFlowV1 struct for UpdateAccessFlowV1
type UpdateAccessFlowV1 struct {
	Name               NullableString                    `json:"name,omitempty"`
	Active             NullableBool                      `json:"active,omitempty"`
	Trigger            NullableUpdateAccessFlowV1Trigger `json:"trigger,omitempty"`
	Grantees           []GranteeV1                       `json:"grantees,omitempty"`
	IntegrationTargets []AccessTargetIntegrationV1       `json:"integration_targets,omitempty"`
	BundleTargets      []AccessTargetBundleV1            `json:"bundle_targets,omitempty"`
	Approvers          []ApproverV1                      `json:"approvers,omitempty"`
	RevokeAfterInSec   NullableInt32                     `json:"revoke_after_in_sec,omitempty"`
	Settings           NullableAccessFlowV1Settings      `json:"settings,omitempty"`
}

// NewUpdateAccessFlowV1 instantiates a new UpdateAccessFlowV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccessFlowV1() *UpdateAccessFlowV1 {
	this := UpdateAccessFlowV1{}
	return &this
}

// NewUpdateAccessFlowV1WithDefaults instantiates a new UpdateAccessFlowV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccessFlowV1WithDefaults() *UpdateAccessFlowV1 {
	this := UpdateAccessFlowV1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateAccessFlowV1) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateAccessFlowV1) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateAccessFlowV1) UnsetName() {
	o.Name.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetActive() bool {
	if o == nil || IsNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *UpdateAccessFlowV1) SetActive(v bool) {
	o.Active.Set(&v)
}

// SetActiveNil sets the value for Active to be an explicit nil
func (o *UpdateAccessFlowV1) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *UpdateAccessFlowV1) UnsetActive() {
	o.Active.Unset()
}

// GetTrigger returns the Trigger field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetTrigger() UpdateAccessFlowV1Trigger {
	if o == nil || IsNil(o.Trigger.Get()) {
		var ret UpdateAccessFlowV1Trigger
		return ret
	}
	return *o.Trigger.Get()
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetTriggerOk() (*UpdateAccessFlowV1Trigger, bool) {
	if o == nil {
		return nil, false
	}
	return o.Trigger.Get(), o.Trigger.IsSet()
}

// HasTrigger returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasTrigger() bool {
	if o != nil && o.Trigger.IsSet() {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given NullableUpdateAccessFlowV1Trigger and assigns it to the Trigger field.
func (o *UpdateAccessFlowV1) SetTrigger(v UpdateAccessFlowV1Trigger) {
	o.Trigger.Set(&v)
}

// SetTriggerNil sets the value for Trigger to be an explicit nil
func (o *UpdateAccessFlowV1) SetTriggerNil() {
	o.Trigger.Set(nil)
}

// UnsetTrigger ensures that no value is present for Trigger, not even an explicit nil
func (o *UpdateAccessFlowV1) UnsetTrigger() {
	o.Trigger.Unset()
}

// GetGrantees returns the Grantees field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetGrantees() []GranteeV1 {
	if o == nil {
		var ret []GranteeV1
		return ret
	}
	return o.Grantees
}

// GetGranteesOk returns a tuple with the Grantees field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetGranteesOk() ([]GranteeV1, bool) {
	if o == nil || IsNil(o.Grantees) {
		return nil, false
	}
	return o.Grantees, true
}

// HasGrantees returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasGrantees() bool {
	if o != nil && IsNil(o.Grantees) {
		return true
	}

	return false
}

// SetGrantees gets a reference to the given []GranteeV1 and assigns it to the Grantees field.
func (o *UpdateAccessFlowV1) SetGrantees(v []GranteeV1) {
	o.Grantees = v
}

// GetIntegrationTargets returns the IntegrationTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetIntegrationTargets() []AccessTargetIntegrationV1 {
	if o == nil {
		var ret []AccessTargetIntegrationV1
		return ret
	}
	return o.IntegrationTargets
}

// GetIntegrationTargetsOk returns a tuple with the IntegrationTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetIntegrationTargetsOk() ([]AccessTargetIntegrationV1, bool) {
	if o == nil || IsNil(o.IntegrationTargets) {
		return nil, false
	}
	return o.IntegrationTargets, true
}

// HasIntegrationTargets returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasIntegrationTargets() bool {
	if o != nil && IsNil(o.IntegrationTargets) {
		return true
	}

	return false
}

// SetIntegrationTargets gets a reference to the given []AccessTargetIntegrationV1 and assigns it to the IntegrationTargets field.
func (o *UpdateAccessFlowV1) SetIntegrationTargets(v []AccessTargetIntegrationV1) {
	o.IntegrationTargets = v
}

// GetBundleTargets returns the BundleTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetBundleTargets() []AccessTargetBundleV1 {
	if o == nil {
		var ret []AccessTargetBundleV1
		return ret
	}
	return o.BundleTargets
}

// GetBundleTargetsOk returns a tuple with the BundleTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetBundleTargetsOk() ([]AccessTargetBundleV1, bool) {
	if o == nil || IsNil(o.BundleTargets) {
		return nil, false
	}
	return o.BundleTargets, true
}

// HasBundleTargets returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasBundleTargets() bool {
	if o != nil && IsNil(o.BundleTargets) {
		return true
	}

	return false
}

// SetBundleTargets gets a reference to the given []AccessTargetBundleV1 and assigns it to the BundleTargets field.
func (o *UpdateAccessFlowV1) SetBundleTargets(v []AccessTargetBundleV1) {
	o.BundleTargets = v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetApprovers() []ApproverV1 {
	if o == nil {
		var ret []ApproverV1
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetApproversOk() ([]ApproverV1, bool) {
	if o == nil || IsNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasApprovers() bool {
	if o != nil && IsNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []ApproverV1 and assigns it to the Approvers field.
func (o *UpdateAccessFlowV1) SetApprovers(v []ApproverV1) {
	o.Approvers = v
}

// GetRevokeAfterInSec returns the RevokeAfterInSec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetRevokeAfterInSec() int32 {
	if o == nil || IsNil(o.RevokeAfterInSec.Get()) {
		var ret int32
		return ret
	}
	return *o.RevokeAfterInSec.Get()
}

// GetRevokeAfterInSecOk returns a tuple with the RevokeAfterInSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetRevokeAfterInSecOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RevokeAfterInSec.Get(), o.RevokeAfterInSec.IsSet()
}

// HasRevokeAfterInSec returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasRevokeAfterInSec() bool {
	if o != nil && o.RevokeAfterInSec.IsSet() {
		return true
	}

	return false
}

// SetRevokeAfterInSec gets a reference to the given NullableInt32 and assigns it to the RevokeAfterInSec field.
func (o *UpdateAccessFlowV1) SetRevokeAfterInSec(v int32) {
	o.RevokeAfterInSec.Set(&v)
}

// SetRevokeAfterInSecNil sets the value for RevokeAfterInSec to be an explicit nil
func (o *UpdateAccessFlowV1) SetRevokeAfterInSecNil() {
	o.RevokeAfterInSec.Set(nil)
}

// UnsetRevokeAfterInSec ensures that no value is present for RevokeAfterInSec, not even an explicit nil
func (o *UpdateAccessFlowV1) UnsetRevokeAfterInSec() {
	o.RevokeAfterInSec.Unset()
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessFlowV1) GetSettings() AccessFlowV1Settings {
	if o == nil || IsNil(o.Settings.Get()) {
		var ret AccessFlowV1Settings
		return ret
	}
	return *o.Settings.Get()
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessFlowV1) GetSettingsOk() (*AccessFlowV1Settings, bool) {
	if o == nil {
		return nil, false
	}
	return o.Settings.Get(), o.Settings.IsSet()
}

// HasSettings returns a boolean if a field has been set.
func (o *UpdateAccessFlowV1) HasSettings() bool {
	if o != nil && o.Settings.IsSet() {
		return true
	}

	return false
}

// SetSettings gets a reference to the given NullableAccessFlowV1Settings and assigns it to the Settings field.
func (o *UpdateAccessFlowV1) SetSettings(v AccessFlowV1Settings) {
	o.Settings.Set(&v)
}

// SetSettingsNil sets the value for Settings to be an explicit nil
func (o *UpdateAccessFlowV1) SetSettingsNil() {
	o.Settings.Set(nil)
}

// UnsetSettings ensures that no value is present for Settings, not even an explicit nil
func (o *UpdateAccessFlowV1) UnsetSettings() {
	o.Settings.Unset()
}

func (o UpdateAccessFlowV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAccessFlowV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	if o.Trigger.IsSet() {
		toSerialize["trigger"] = o.Trigger.Get()
	}
	if o.Grantees != nil {
		toSerialize["grantees"] = o.Grantees
	}
	if o.IntegrationTargets != nil {
		toSerialize["integration_targets"] = o.IntegrationTargets
	}
	if o.BundleTargets != nil {
		toSerialize["bundle_targets"] = o.BundleTargets
	}
	if o.Approvers != nil {
		toSerialize["approvers"] = o.Approvers
	}
	if o.RevokeAfterInSec.IsSet() {
		toSerialize["revoke_after_in_sec"] = o.RevokeAfterInSec.Get()
	}
	if o.Settings.IsSet() {
		toSerialize["settings"] = o.Settings.Get()
	}
	return toSerialize, nil
}

type NullableUpdateAccessFlowV1 struct {
	value *UpdateAccessFlowV1
	isSet bool
}

func (v NullableUpdateAccessFlowV1) Get() *UpdateAccessFlowV1 {
	return v.value
}

func (v *NullableUpdateAccessFlowV1) Set(val *UpdateAccessFlowV1) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccessFlowV1) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccessFlowV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccessFlowV1(val *UpdateAccessFlowV1) *NullableUpdateAccessFlowV1 {
	return &NullableUpdateAccessFlowV1{value: val, isSet: true}
}

func (v NullableUpdateAccessFlowV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccessFlowV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

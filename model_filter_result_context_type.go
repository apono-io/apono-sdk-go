/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// FilterResultContextType the model 'FilterResultContextType'
type FilterResultContextType string

// List of FilterResultContextType
const (
	FILTERRESULTCONTEXTTYPE_RESOURCE             FilterResultContextType = "Resource"
	FILTERRESULTCONTEXTTYPE_RESOURCE_INTEGRATION FilterResultContextType = "ResourceIntegration"
	FILTERRESULTCONTEXTTYPE_USER                 FilterResultContextType = "User"
	FILTERRESULTCONTEXTTYPE_GROUP                FilterResultContextType = "Group"
	FILTERRESULTCONTEXTTYPE_CONTEXT_ATTRIBUTE    FilterResultContextType = "ContextAttribute"
	FILTERRESULTCONTEXTTYPE_PERMISSIONS          FilterResultContextType = "Permissions"
	FILTERRESULTCONTEXTTYPE_METADATA             FilterResultContextType = "Metadata"
	FILTERRESULTCONTEXTTYPE_ACCESS_FLOW_NAME     FilterResultContextType = "AccessFlowName"
)

// All allowed values of FilterResultContextType enum
var AllowedFilterResultContextTypeEnumValues = []FilterResultContextType{
	"Resource",
	"ResourceIntegration",
	"User",
	"Group",
	"ContextAttribute",
	"Permissions",
	"Metadata",
	"AccessFlowName",
}

func (v *FilterResultContextType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterResultContextType(value)
	for _, existing := range AllowedFilterResultContextTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterResultContextType", value)
}

// NewFilterResultContextTypeFromValue returns a pointer to a valid FilterResultContextType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterResultContextTypeFromValue(v string) (*FilterResultContextType, error) {
	ev := FilterResultContextType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterResultContextType: valid values are %v", v, AllowedFilterResultContextTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterResultContextType) IsValid() bool {
	for _, existing := range AllowedFilterResultContextTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterResultContextType value
func (v FilterResultContextType) Ptr() *FilterResultContextType {
	return &v
}

type NullableFilterResultContextType struct {
	value *FilterResultContextType
	isSet bool
}

func (v NullableFilterResultContextType) Get() *FilterResultContextType {
	return v.value
}

func (v *NullableFilterResultContextType) Set(val *FilterResultContextType) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterResultContextType) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterResultContextType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterResultContextType(val *FilterResultContextType) *NullableFilterResultContextType {
	return &NullableFilterResultContextType{value: val, isSet: true}
}

func (v NullableFilterResultContextType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterResultContextType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// AccessStatusModel the model 'AccessStatusModel'
type AccessStatusModel string

// List of AccessStatusModel
const (
	ACCESSSTATUSMODEL_PENDING  AccessStatusModel = "PENDING"
	ACCESSSTATUSMODEL_APPROVED AccessStatusModel = "APPROVED"
	ACCESSSTATUSMODEL_REJECTED AccessStatusModel = "REJECTED"
	ACCESSSTATUSMODEL_GRANTED  AccessStatusModel = "GRANTED"
	ACCESSSTATUSMODEL_REVOKING AccessStatusModel = "REVOKING"
	ACCESSSTATUSMODEL_EXPIRED  AccessStatusModel = "EXPIRED"
	ACCESSSTATUSMODEL_FAILED   AccessStatusModel = "FAILED"
)

// All allowed values of AccessStatusModel enum
var AllowedAccessStatusModelEnumValues = []AccessStatusModel{
	"PENDING",
	"APPROVED",
	"REJECTED",
	"GRANTED",
	"REVOKING",
	"EXPIRED",
	"FAILED",
}

func (v *AccessStatusModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessStatusModel(value)
	for _, existing := range AllowedAccessStatusModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessStatusModel", value)
}

// NewAccessStatusModelFromValue returns a pointer to a valid AccessStatusModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessStatusModelFromValue(v string) (*AccessStatusModel, error) {
	ev := AccessStatusModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessStatusModel: valid values are %v", v, AllowedAccessStatusModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessStatusModel) IsValid() bool {
	for _, existing := range AllowedAccessStatusModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessStatusModel value
func (v AccessStatusModel) Ptr() *AccessStatusModel {
	return &v
}

type NullableAccessStatusModel struct {
	value *AccessStatusModel
	isSet bool
}

func (v NullableAccessStatusModel) Get() *AccessStatusModel {
	return v.value
}

func (v *NullableAccessStatusModel) Set(val *AccessStatusModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessStatusModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessStatusModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessStatusModel(val *AccessStatusModel) *NullableAccessStatusModel {
	return &NullableAccessStatusModel{value: val, isSet: true}
}

func (v NullableAccessStatusModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessStatusModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

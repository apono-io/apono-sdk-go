/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
)

// checks if the IntegrationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationConfig{}

// IntegrationConfig struct for IntegrationConfig
type IntegrationConfig struct {
	Name                 string                   `json:"name"`
	Type                 string                   `json:"type"`
	Description          string                   `json:"description"`
	Params               []IntegrationConfigParam `json:"params"`
	RequiresSecret       bool                     `json:"requires_secret"`
	SupportedSecretTypes []string                 `json:"supported_secret_types"`
}

// NewIntegrationConfig instantiates a new IntegrationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationConfig(name string, type_ string, description string, params []IntegrationConfigParam, requiresSecret bool, supportedSecretTypes []string) *IntegrationConfig {
	this := IntegrationConfig{}
	this.Name = name
	this.Type = type_
	this.Description = description
	this.Params = params
	this.RequiresSecret = requiresSecret
	this.SupportedSecretTypes = supportedSecretTypes
	return &this
}

// NewIntegrationConfigWithDefaults instantiates a new IntegrationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationConfigWithDefaults() *IntegrationConfig {
	this := IntegrationConfig{}
	return &this
}

// GetName returns the Name field value
func (o *IntegrationConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IntegrationConfig) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *IntegrationConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntegrationConfig) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *IntegrationConfig) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfig) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IntegrationConfig) SetDescription(v string) {
	o.Description = v
}

// GetParams returns the Params field value
func (o *IntegrationConfig) GetParams() []IntegrationConfigParam {
	if o == nil {
		var ret []IntegrationConfigParam
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfig) GetParamsOk() ([]IntegrationConfigParam, bool) {
	if o == nil {
		return nil, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *IntegrationConfig) SetParams(v []IntegrationConfigParam) {
	o.Params = v
}

// GetRequiresSecret returns the RequiresSecret field value
func (o *IntegrationConfig) GetRequiresSecret() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequiresSecret
}

// GetRequiresSecretOk returns a tuple with the RequiresSecret field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfig) GetRequiresSecretOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiresSecret, true
}

// SetRequiresSecret sets field value
func (o *IntegrationConfig) SetRequiresSecret(v bool) {
	o.RequiresSecret = v
}

// GetSupportedSecretTypes returns the SupportedSecretTypes field value
func (o *IntegrationConfig) GetSupportedSecretTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SupportedSecretTypes
}

// GetSupportedSecretTypesOk returns a tuple with the SupportedSecretTypes field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfig) GetSupportedSecretTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedSecretTypes, true
}

// SetSupportedSecretTypes sets field value
func (o *IntegrationConfig) SetSupportedSecretTypes(v []string) {
	o.SupportedSecretTypes = v
}

func (o IntegrationConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["description"] = o.Description
	toSerialize["params"] = o.Params
	toSerialize["requires_secret"] = o.RequiresSecret
	toSerialize["supported_secret_types"] = o.SupportedSecretTypes
	return toSerialize, nil
}

type NullableIntegrationConfig struct {
	value *IntegrationConfig
	isSet bool
}

func (v NullableIntegrationConfig) Get() *IntegrationConfig {
	return v.value
}

func (v *NullableIntegrationConfig) Set(val *IntegrationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationConfig(val *IntegrationConfig) *NullableIntegrationConfig {
	return &NullableIntegrationConfig{value: val, isSet: true}
}

func (v NullableIntegrationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

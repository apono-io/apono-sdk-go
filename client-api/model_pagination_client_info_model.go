/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// checks if the PaginationClientInfoModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginationClientInfoModel{}

// PaginationClientInfoModel struct for PaginationClientInfoModel
type PaginationClientInfoModel struct {
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
	Total  NullableInt32 `json:"total,omitempty"`
}

type _PaginationClientInfoModel PaginationClientInfoModel

// NewPaginationClientInfoModel instantiates a new PaginationClientInfoModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationClientInfoModel(limit int32, offset int32) *PaginationClientInfoModel {
	this := PaginationClientInfoModel{}
	this.Limit = limit
	this.Offset = offset
	return &this
}

// NewPaginationClientInfoModelWithDefaults instantiates a new PaginationClientInfoModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationClientInfoModelWithDefaults() *PaginationClientInfoModel {
	this := PaginationClientInfoModel{}
	return &this
}

// GetLimit returns the Limit field value
func (o *PaginationClientInfoModel) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *PaginationClientInfoModel) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *PaginationClientInfoModel) SetLimit(v int32) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *PaginationClientInfoModel) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *PaginationClientInfoModel) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *PaginationClientInfoModel) SetOffset(v int32) {
	o.Offset = v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaginationClientInfoModel) GetTotal() int32 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret int32
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaginationClientInfoModel) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *PaginationClientInfoModel) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableInt32 and assigns it to the Total field.
func (o *PaginationClientInfoModel) SetTotal(v int32) {
	o.Total.Set(&v)
}

// SetTotalNil sets the value for Total to be an explicit nil
func (o *PaginationClientInfoModel) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *PaginationClientInfoModel) UnsetTotal() {
	o.Total.Unset()
}

func (o PaginationClientInfoModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginationClientInfoModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["offset"] = o.Offset
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	return toSerialize, nil
}

func (o *PaginationClientInfoModel) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
		"offset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginationClientInfoModel := _PaginationClientInfoModel{}

	err = json.Unmarshal(bytes, &varPaginationClientInfoModel)

	if err != nil {
		return err
	}

	*o = PaginationClientInfoModel(varPaginationClientInfoModel)

	return err
}

type NullablePaginationClientInfoModel struct {
	value *PaginationClientInfoModel
	isSet bool
}

func (v NullablePaginationClientInfoModel) Get() *PaginationClientInfoModel {
	return v.value
}

func (v *NullablePaginationClientInfoModel) Set(val *PaginationClientInfoModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationClientInfoModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationClientInfoModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationClientInfoModel(val *PaginationClientInfoModel) *NullablePaginationClientInfoModel {
	return &NullablePaginationClientInfoModel{value: val, isSet: true}
}

func (v NullablePaginationClientInfoModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationClientInfoModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

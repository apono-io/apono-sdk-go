/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// AccessGroupStatus the model 'AccessGroupStatus'
type AccessGroupStatus string

// List of AccessGroupStatus
const (
	ACCESSGROUPSTATUS_SUCCESS AccessGroupStatus = "Success"
	ACCESSGROUPSTATUS_FAILURE AccessGroupStatus = "Failure"
	ACCESSGROUPSTATUS_WARNING AccessGroupStatus = "Warning"
)

// All allowed values of AccessGroupStatus enum
var AllowedAccessGroupStatusEnumValues = []AccessGroupStatus{
	"Success",
	"Failure",
	"Warning",
}

func (v *AccessGroupStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessGroupStatus(value)
	for _, existing := range AllowedAccessGroupStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessGroupStatus", value)
}

// NewAccessGroupStatusFromValue returns a pointer to a valid AccessGroupStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessGroupStatusFromValue(v string) (*AccessGroupStatus, error) {
	ev := AccessGroupStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessGroupStatus: valid values are %v", v, AllowedAccessGroupStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessGroupStatus) IsValid() bool {
	for _, existing := range AllowedAccessGroupStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessGroupStatus value
func (v AccessGroupStatus) Ptr() *AccessGroupStatus {
	return &v
}

type NullableAccessGroupStatus struct {
	value *AccessGroupStatus
	isSet bool
}

func (v NullableAccessGroupStatus) Get() *AccessGroupStatus {
	return v.value
}

func (v *NullableAccessGroupStatus) Set(val *AccessGroupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessGroupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessGroupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessGroupStatus(val *AccessGroupStatus) *NullableAccessGroupStatus {
	return &NullableAccessGroupStatus{value: val, isSet: true}
}

func (v NullableAccessGroupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessGroupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// checks if the UserClientModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserClientModel{}

// UserClientModel struct for UserClientModel
type UserClientModel struct {
	Id    string         `json:"id"`
	Name  string         `json:"name"`
	Email string         `json:"email"`
	Photo NullableString `json:"photo,omitempty"`
}

type _UserClientModel UserClientModel

// NewUserClientModel instantiates a new UserClientModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserClientModel(id string, name string, email string) *UserClientModel {
	this := UserClientModel{}
	this.Id = id
	this.Name = name
	this.Email = email
	return &this
}

// NewUserClientModelWithDefaults instantiates a new UserClientModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserClientModelWithDefaults() *UserClientModel {
	this := UserClientModel{}
	return &this
}

// GetId returns the Id field value
func (o *UserClientModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserClientModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserClientModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *UserClientModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserClientModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserClientModel) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *UserClientModel) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserClientModel) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserClientModel) SetEmail(v string) {
	o.Email = v
}

// GetPhoto returns the Photo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserClientModel) GetPhoto() string {
	if o == nil || IsNil(o.Photo.Get()) {
		var ret string
		return ret
	}
	return *o.Photo.Get()
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserClientModel) GetPhotoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Photo.Get(), o.Photo.IsSet()
}

// HasPhoto returns a boolean if a field has been set.
func (o *UserClientModel) HasPhoto() bool {
	if o != nil && o.Photo.IsSet() {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given NullableString and assigns it to the Photo field.
func (o *UserClientModel) SetPhoto(v string) {
	o.Photo.Set(&v)
}

// SetPhotoNil sets the value for Photo to be an explicit nil
func (o *UserClientModel) SetPhotoNil() {
	o.Photo.Set(nil)
}

// UnsetPhoto ensures that no value is present for Photo, not even an explicit nil
func (o *UserClientModel) UnsetPhoto() {
	o.Photo.Unset()
}

func (o UserClientModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserClientModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	if o.Photo.IsSet() {
		toSerialize["photo"] = o.Photo.Get()
	}
	return toSerialize, nil
}

func (o *UserClientModel) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserClientModel := _UserClientModel{}

	err = json.Unmarshal(bytes, &varUserClientModel)

	if err != nil {
		return err
	}

	*o = UserClientModel(varUserClientModel)

	return err
}

type NullableUserClientModel struct {
	value *UserClientModel
	isSet bool
}

func (v NullableUserClientModel) Get() *UserClientModel {
	return v.value
}

func (v *NullableUserClientModel) Set(val *UserClientModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserClientModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserClientModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserClientModel(val *UserClientModel) *NullableUserClientModel {
	return &NullableUserClientModel{value: val, isSet: true}
}

func (v NullableUserClientModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserClientModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

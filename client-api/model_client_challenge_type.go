/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// ClientChallengeType the model 'ClientChallengeType'
type ClientChallengeType string

// List of ClientChallengeType
const (
	CLIENTCHALLENGETYPE_USER    ClientChallengeType = "User"
	CLIENTCHALLENGETYPE_GROUP   ClientChallengeType = "Group"
	CLIENTCHALLENGETYPE_SHIFT   ClientChallengeType = "Shift"
	CLIENTCHALLENGETYPE_MANAGER ClientChallengeType = "Manager"
)

// All allowed values of ClientChallengeType enum
var AllowedClientChallengeTypeEnumValues = []ClientChallengeType{
	"User",
	"Group",
	"Shift",
	"Manager",
}

func (v *ClientChallengeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientChallengeType(value)
	for _, existing := range AllowedClientChallengeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientChallengeType", value)
}

// NewClientChallengeTypeFromValue returns a pointer to a valid ClientChallengeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientChallengeTypeFromValue(v string) (*ClientChallengeType, error) {
	ev := ClientChallengeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientChallengeType: valid values are %v", v, AllowedClientChallengeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientChallengeType) IsValid() bool {
	for _, existing := range AllowedClientChallengeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClientChallengeType value
func (v ClientChallengeType) Ptr() *ClientChallengeType {
	return &v
}

type NullableClientChallengeType struct {
	value *ClientChallengeType
	isSet bool
}

func (v NullableClientChallengeType) Get() *ClientChallengeType {
	return v.value
}

func (v *NullableClientChallengeType) Set(val *ClientChallengeType) {
	v.value = val
	v.isSet = true
}

func (v NullableClientChallengeType) IsSet() bool {
	return v.isSet
}

func (v *NullableClientChallengeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientChallengeType(val *ClientChallengeType) *NullableClientChallengeType {
	return &NullableClientChallengeType{value: val, isSet: true}
}

func (v NullableClientChallengeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientChallengeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// ClientChallengeStatus the model 'ClientChallengeStatus'
type ClientChallengeStatus string

// List of ClientChallengeStatus
const (
	CLIENTCHALLENGESTATUS_APPROVED ClientChallengeStatus = "Approved"
	CLIENTCHALLENGESTATUS_REJECTED ClientChallengeStatus = "Rejected"
	CLIENTCHALLENGESTATUS_PENDING  ClientChallengeStatus = "Pending"
)

// All allowed values of ClientChallengeStatus enum
var AllowedClientChallengeStatusEnumValues = []ClientChallengeStatus{
	"Approved",
	"Rejected",
	"Pending",
}

func (v *ClientChallengeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientChallengeStatus(value)
	for _, existing := range AllowedClientChallengeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientChallengeStatus", value)
}

// NewClientChallengeStatusFromValue returns a pointer to a valid ClientChallengeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientChallengeStatusFromValue(v string) (*ClientChallengeStatus, error) {
	ev := ClientChallengeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientChallengeStatus: valid values are %v", v, AllowedClientChallengeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientChallengeStatus) IsValid() bool {
	for _, existing := range AllowedClientChallengeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClientChallengeStatus value
func (v ClientChallengeStatus) Ptr() *ClientChallengeStatus {
	return &v
}

type NullableClientChallengeStatus struct {
	value *ClientChallengeStatus
	isSet bool
}

func (v NullableClientChallengeStatus) Get() *ClientChallengeStatus {
	return v.value
}

func (v *NullableClientChallengeStatus) Set(val *ClientChallengeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClientChallengeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClientChallengeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientChallengeStatus(val *ClientChallengeStatus) *NullableClientChallengeStatus {
	return &NullableClientChallengeStatus{value: val, isSet: true}
}

func (v NullableClientChallengeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientChallengeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// ClientChallengeLogicalRelation the model 'ClientChallengeLogicalRelation'
type ClientChallengeLogicalRelation string

// List of ClientChallengeLogicalRelation
const (
	CLIENTCHALLENGELOGICALRELATION_ANY_OF ClientChallengeLogicalRelation = "AnyOf"
	CLIENTCHALLENGELOGICALRELATION_ALL_OF ClientChallengeLogicalRelation = "AllOf"
)

// All allowed values of ClientChallengeLogicalRelation enum
var AllowedClientChallengeLogicalRelationEnumValues = []ClientChallengeLogicalRelation{
	"AnyOf",
	"AllOf",
}

func (v *ClientChallengeLogicalRelation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientChallengeLogicalRelation(value)
	for _, existing := range AllowedClientChallengeLogicalRelationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientChallengeLogicalRelation", value)
}

// NewClientChallengeLogicalRelationFromValue returns a pointer to a valid ClientChallengeLogicalRelation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientChallengeLogicalRelationFromValue(v string) (*ClientChallengeLogicalRelation, error) {
	ev := ClientChallengeLogicalRelation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientChallengeLogicalRelation: valid values are %v", v, AllowedClientChallengeLogicalRelationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientChallengeLogicalRelation) IsValid() bool {
	for _, existing := range AllowedClientChallengeLogicalRelationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClientChallengeLogicalRelation value
func (v ClientChallengeLogicalRelation) Ptr() *ClientChallengeLogicalRelation {
	return &v
}

type NullableClientChallengeLogicalRelation struct {
	value *ClientChallengeLogicalRelation
	isSet bool
}

func (v NullableClientChallengeLogicalRelation) Get() *ClientChallengeLogicalRelation {
	return v.value
}

func (v *NullableClientChallengeLogicalRelation) Set(val *ClientChallengeLogicalRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableClientChallengeLogicalRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableClientChallengeLogicalRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientChallengeLogicalRelation(val *ClientChallengeLogicalRelation) *NullableClientChallengeLogicalRelation {
	return &NullableClientChallengeLogicalRelation{value: val, isSet: true}
}

func (v NullableClientChallengeLogicalRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientChallengeLogicalRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
	"fmt"
)

// ApproverTypeModel the model 'ApproverTypeModel'
type ApproverTypeModel string

// List of ApproverTypeModel
const (
	APPROVERTYPEMODEL_USER              ApproverTypeModel = "USER"
	APPROVERTYPEMODEL_GROUP             ApproverTypeModel = "GROUP"
	APPROVERTYPEMODEL_CONTEXT_ATTRIBUTE ApproverTypeModel = "CONTEXT_ATTRIBUTE"
)

// All allowed values of ApproverTypeModel enum
var AllowedApproverTypeModelEnumValues = []ApproverTypeModel{
	"USER",
	"GROUP",
	"CONTEXT_ATTRIBUTE",
}

func (v *ApproverTypeModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApproverTypeModel(value)
	for _, existing := range AllowedApproverTypeModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApproverTypeModel", value)
}

// NewApproverTypeModelFromValue returns a pointer to a valid ApproverTypeModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApproverTypeModelFromValue(v string) (*ApproverTypeModel, error) {
	ev := ApproverTypeModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApproverTypeModel: valid values are %v", v, AllowedApproverTypeModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApproverTypeModel) IsValid() bool {
	for _, existing := range AllowedApproverTypeModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApproverTypeModel value
func (v ApproverTypeModel) Ptr() *ApproverTypeModel {
	return &v
}

type NullableApproverTypeModel struct {
	value *ApproverTypeModel
	isSet bool
}

func (v NullableApproverTypeModel) Get() *ApproverTypeModel {
	return v.value
}

func (v *NullableApproverTypeModel) Set(val *ApproverTypeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableApproverTypeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableApproverTypeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproverTypeModel(val *ApproverTypeModel) *NullableApproverTypeModel {
	return &NullableApproverTypeModel{value: val, isSet: true}
}

func (v NullableApproverTypeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproverTypeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

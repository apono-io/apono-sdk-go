/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
)

// checks if the UpdateAccessBundleV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAccessBundleV1{}

// UpdateAccessBundleV1 struct for UpdateAccessBundleV1
type UpdateAccessBundleV1 struct {
	Name               NullableString              `json:"name,omitempty"`
	IntegrationTargets []AccessTargetIntegrationV1 `json:"integration_targets,omitempty"`
}

// NewUpdateAccessBundleV1 instantiates a new UpdateAccessBundleV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccessBundleV1() *UpdateAccessBundleV1 {
	this := UpdateAccessBundleV1{}
	return &this
}

// NewUpdateAccessBundleV1WithDefaults instantiates a new UpdateAccessBundleV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccessBundleV1WithDefaults() *UpdateAccessBundleV1 {
	this := UpdateAccessBundleV1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessBundleV1) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessBundleV1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAccessBundleV1) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateAccessBundleV1) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateAccessBundleV1) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateAccessBundleV1) UnsetName() {
	o.Name.Unset()
}

// GetIntegrationTargets returns the IntegrationTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccessBundleV1) GetIntegrationTargets() []AccessTargetIntegrationV1 {
	if o == nil {
		var ret []AccessTargetIntegrationV1
		return ret
	}
	return o.IntegrationTargets
}

// GetIntegrationTargetsOk returns a tuple with the IntegrationTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccessBundleV1) GetIntegrationTargetsOk() ([]AccessTargetIntegrationV1, bool) {
	if o == nil || IsNil(o.IntegrationTargets) {
		return nil, false
	}
	return o.IntegrationTargets, true
}

// HasIntegrationTargets returns a boolean if a field has been set.
func (o *UpdateAccessBundleV1) HasIntegrationTargets() bool {
	if o != nil && IsNil(o.IntegrationTargets) {
		return true
	}

	return false
}

// SetIntegrationTargets gets a reference to the given []AccessTargetIntegrationV1 and assigns it to the IntegrationTargets field.
func (o *UpdateAccessBundleV1) SetIntegrationTargets(v []AccessTargetIntegrationV1) {
	o.IntegrationTargets = v
}

func (o UpdateAccessBundleV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAccessBundleV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.IntegrationTargets != nil {
		toSerialize["integration_targets"] = o.IntegrationTargets
	}
	return toSerialize, nil
}

type NullableUpdateAccessBundleV1 struct {
	value *UpdateAccessBundleV1
	isSet bool
}

func (v NullableUpdateAccessBundleV1) Get() *UpdateAccessBundleV1 {
	return v.value
}

func (v *NullableUpdateAccessBundleV1) Set(val *UpdateAccessBundleV1) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccessBundleV1) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccessBundleV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccessBundleV1(val *UpdateAccessBundleV1) *NullableUpdateAccessBundleV1 {
	return &NullableUpdateAccessBundleV1{value: val, isSet: true}
}

func (v NullableUpdateAccessBundleV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccessBundleV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
)

// checks if the FilterResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterResult{}

// FilterResult struct for FilterResult
type FilterResult struct {
	Context       FilterResultContext     `json:"context"`
	FilterPhrase  string                  `json:"filter_phrase"`
	MatchedValues []string                `json:"matched_values"`
	Type          FilterResultContextType `json:"type"`
}

// NewFilterResult instantiates a new FilterResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterResult(context FilterResultContext, filterPhrase string, matchedValues []string, type_ FilterResultContextType) *FilterResult {
	this := FilterResult{}
	this.Context = context
	this.FilterPhrase = filterPhrase
	this.MatchedValues = matchedValues
	this.Type = type_
	return &this
}

// NewFilterResultWithDefaults instantiates a new FilterResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterResultWithDefaults() *FilterResult {
	this := FilterResult{}
	return &this
}

// GetContext returns the Context field value
func (o *FilterResult) GetContext() FilterResultContext {
	if o == nil {
		var ret FilterResultContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *FilterResult) GetContextOk() (*FilterResultContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *FilterResult) SetContext(v FilterResultContext) {
	o.Context = v
}

// GetFilterPhrase returns the FilterPhrase field value
func (o *FilterResult) GetFilterPhrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterPhrase
}

// GetFilterPhraseOk returns a tuple with the FilterPhrase field value
// and a boolean to check if the value has been set.
func (o *FilterResult) GetFilterPhraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterPhrase, true
}

// SetFilterPhrase sets field value
func (o *FilterResult) SetFilterPhrase(v string) {
	o.FilterPhrase = v
}

// GetMatchedValues returns the MatchedValues field value
func (o *FilterResult) GetMatchedValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MatchedValues
}

// GetMatchedValuesOk returns a tuple with the MatchedValues field value
// and a boolean to check if the value has been set.
func (o *FilterResult) GetMatchedValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchedValues, true
}

// SetMatchedValues sets field value
func (o *FilterResult) SetMatchedValues(v []string) {
	o.MatchedValues = v
}

// GetType returns the Type field value
func (o *FilterResult) GetType() FilterResultContextType {
	if o == nil {
		var ret FilterResultContextType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilterResult) GetTypeOk() (*FilterResultContextType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilterResult) SetType(v FilterResultContextType) {
	o.Type = v
}

func (o FilterResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["filter_phrase"] = o.FilterPhrase
	toSerialize["matched_values"] = o.MatchedValues
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableFilterResult struct {
	value *FilterResult
	isSet bool
}

func (v NullableFilterResult) Get() *FilterResult {
	return v.value
}

func (v *NullableFilterResult) Set(val *FilterResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterResult(val *FilterResult) *NullableFilterResult {
	return &NullableFilterResult{value: val, isSet: true}
}

func (v NullableFilterResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

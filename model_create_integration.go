/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apono

import (
	"encoding/json"
)

// checks if the CreateIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateIntegration{}

// CreateIntegration struct for CreateIntegration
type CreateIntegration struct {
	Name                   string                 `json:"name"`
	Type                   string                 `json:"type"`
	ProvisionerId          NullableString         `json:"provisioner_id,omitempty"`
	Metadata               map[string]interface{} `json:"metadata"`
	SecretConfig           map[string]interface{} `json:"secret_config,omitempty"`
	ConnectedResourceTypes []string               `json:"connected_resource_types,omitempty"`
}

// NewCreateIntegration instantiates a new CreateIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIntegration(name string, type_ string, metadata map[string]interface{}) *CreateIntegration {
	this := CreateIntegration{}
	this.Name = name
	this.Type = type_
	this.Metadata = metadata
	return &this
}

// NewCreateIntegrationWithDefaults instantiates a new CreateIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIntegrationWithDefaults() *CreateIntegration {
	this := CreateIntegration{}
	return &this
}

// GetName returns the Name field value
func (o *CreateIntegration) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateIntegration) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateIntegration) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *CreateIntegration) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateIntegration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateIntegration) SetType(v string) {
	o.Type = v
}

// GetProvisionerId returns the ProvisionerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIntegration) GetProvisionerId() string {
	if o == nil || IsNil(o.ProvisionerId.Get()) {
		var ret string
		return ret
	}
	return *o.ProvisionerId.Get()
}

// GetProvisionerIdOk returns a tuple with the ProvisionerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIntegration) GetProvisionerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProvisionerId.Get(), o.ProvisionerId.IsSet()
}

// HasProvisionerId returns a boolean if a field has been set.
func (o *CreateIntegration) HasProvisionerId() bool {
	if o != nil && o.ProvisionerId.IsSet() {
		return true
	}

	return false
}

// SetProvisionerId gets a reference to the given NullableString and assigns it to the ProvisionerId field.
func (o *CreateIntegration) SetProvisionerId(v string) {
	o.ProvisionerId.Set(&v)
}

// SetProvisionerIdNil sets the value for ProvisionerId to be an explicit nil
func (o *CreateIntegration) SetProvisionerIdNil() {
	o.ProvisionerId.Set(nil)
}

// UnsetProvisionerId ensures that no value is present for ProvisionerId, not even an explicit nil
func (o *CreateIntegration) UnsetProvisionerId() {
	o.ProvisionerId.Unset()
}

// GetMetadata returns the Metadata field value
func (o *CreateIntegration) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CreateIntegration) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *CreateIntegration) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetSecretConfig returns the SecretConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIntegration) GetSecretConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SecretConfig
}

// GetSecretConfigOk returns a tuple with the SecretConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIntegration) GetSecretConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SecretConfig) {
		return map[string]interface{}{}, false
	}
	return o.SecretConfig, true
}

// HasSecretConfig returns a boolean if a field has been set.
func (o *CreateIntegration) HasSecretConfig() bool {
	if o != nil && IsNil(o.SecretConfig) {
		return true
	}

	return false
}

// SetSecretConfig gets a reference to the given map[string]interface{} and assigns it to the SecretConfig field.
func (o *CreateIntegration) SetSecretConfig(v map[string]interface{}) {
	o.SecretConfig = v
}

// GetConnectedResourceTypes returns the ConnectedResourceTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIntegration) GetConnectedResourceTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ConnectedResourceTypes
}

// GetConnectedResourceTypesOk returns a tuple with the ConnectedResourceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIntegration) GetConnectedResourceTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ConnectedResourceTypes) {
		return nil, false
	}
	return o.ConnectedResourceTypes, true
}

// HasConnectedResourceTypes returns a boolean if a field has been set.
func (o *CreateIntegration) HasConnectedResourceTypes() bool {
	if o != nil && IsNil(o.ConnectedResourceTypes) {
		return true
	}

	return false
}

// SetConnectedResourceTypes gets a reference to the given []string and assigns it to the ConnectedResourceTypes field.
func (o *CreateIntegration) SetConnectedResourceTypes(v []string) {
	o.ConnectedResourceTypes = v
}

func (o CreateIntegration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if o.ProvisionerId.IsSet() {
		toSerialize["provisioner_id"] = o.ProvisionerId.Get()
	}
	toSerialize["metadata"] = o.Metadata
	if o.SecretConfig != nil {
		toSerialize["secret_config"] = o.SecretConfig
	}
	if o.ConnectedResourceTypes != nil {
		toSerialize["connected_resource_types"] = o.ConnectedResourceTypes
	}
	return toSerialize, nil
}

type NullableCreateIntegration struct {
	value *CreateIntegration
	isSet bool
}

func (v NullableCreateIntegration) Get() *CreateIntegration {
	return v.value
}

func (v *NullableCreateIntegration) Set(val *CreateIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIntegration(val *CreateIntegration) *NullableCreateIntegration {
	return &NullableCreateIntegration{value: val, isSet: true}
}

func (v NullableCreateIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
